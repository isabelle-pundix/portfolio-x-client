/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace JonesGlpLeverageStrategy {
  export type LeverageConfigStruct = {
    target: BigNumberish;
    min: BigNumberish;
    max: BigNumberish;
  };

  export type LeverageConfigStructOutput = [
    target: bigint,
    min: bigint,
    max: bigint
  ] & { target: bigint; min: bigint; max: bigint };
}

export interface GLPLeverageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "DEFAULT_ADMIN_ROLE"
      | "GLP_DECIMALS"
      | "GMX_BASIS"
      | "GOVERNOR_ROLE"
      | "KEEPER_ROLE"
      | "OPERATOR_ROLE"
      | "OWNER_ROLE"
      | "PRECISION"
      | "USDC_DECIMALS"
      | "acceptAccountTransfer"
      | "buyGlpStableSimulation"
      | "compound"
      | "emergencyWithdraw"
      | "getGMXCapDifference"
      | "getRedeemStableGMXIncentive"
      | "getRequiredGlpAmount"
      | "getRequiredStableAmount"
      | "getRoleAdmin"
      | "getStableGlpValue"
      | "getTargetLeverage"
      | "getUnderlyingGlp"
      | "glp"
      | "glpMintIncentive"
      | "glpRedeemRetention"
      | "glpRetentionPercentage"
      | "grantRole"
      | "hasRole"
      | "incentiveReceiver"
      | "initialize"
      | "leverage"
      | "leverageConfig"
      | "leverageDown"
      | "leverageUp"
      | "onGlpDeposit"
      | "onGlpRedeem"
      | "onStableDeposit"
      | "onStableRedeem"
      | "proxiableUUID"
      | "rebalance"
      | "renounceRole"
      | "revokeRole"
      | "setAsset"
      | "setGlpAddress"
      | "setLeverageConfig"
      | "setNewRetentions"
      | "setStableAddress"
      | "stable"
      | "stableDebt"
      | "stableRetentionPercentage"
      | "supportsInterface"
      | "transferAccount"
      | "unwind"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "utilization"
      | "yrt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "BorrowStable"
      | "Compound"
      | "Deleverage"
      | "EmergencyWithdraw"
      | "Initialized"
      | "Leverage"
      | "LeverageDown"
      | "LeverageUp"
      | "Liquidate"
      | "Rebalance"
      | "RepayGlp"
      | "RepayStable"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetLeverageConfig"
      | "UpdateGlpAddress"
      | "UpdateStableAddress"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GLP_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GMX_BASIS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GOVERNOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "USDC_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAccountTransfer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyGlpStableSimulation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "compound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGMXCapDifference",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemStableGMXIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredGlpAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredStableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableGlpValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingGlp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "glp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "glpMintIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "glpRedeemRetention",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "glpRetentionPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      JonesGlpLeverageStrategy.LeverageConfigStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "leverage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "leverageConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverageDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leverageUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onGlpDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onGlpRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onStableDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onStableRedeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsset",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlpAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverageConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewRetentions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stableDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableRetentionPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAccount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unwind", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "utilization",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yrt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLP_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GMX_BASIS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USDC_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAccountTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyGlpStableSimulation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGMXCapDifference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemStableGMXIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredGlpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredStableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableGlpValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "glpMintIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "glpRedeemRetention",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "glpRetentionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentiveReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leverageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverageUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onGlpDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onGlpRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onStableDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onStableRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlpAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewRetentions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stableDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableRetentionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yrt", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowStableEvent {
  export type InputTuple = [_amount: BigNumberish];
  export type OutputTuple = [_amount: bigint];
  export interface OutputObject {
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompoundEvent {
  export type InputTuple = [_rewards: BigNumberish, _retentions: BigNumberish];
  export type OutputTuple = [_rewards: bigint, _retentions: bigint];
  export interface OutputObject {
    _rewards: bigint;
    _retentions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeleverageEvent {
  export type InputTuple = [
    _glpAmount: BigNumberish,
    _glpRedeemed: BigNumberish
  ];
  export type OutputTuple = [_glpAmount: bigint, _glpRedeemed: bigint];
  export interface OutputObject {
    _glpAmount: bigint;
    _glpRedeemed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [_to: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_to: string, _amount: bigint];
  export interface OutputObject {
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeverageEvent {
  export type InputTuple = [
    _glpDeposited: BigNumberish,
    _glpMinted: BigNumberish
  ];
  export type OutputTuple = [_glpDeposited: bigint, _glpMinted: bigint];
  export interface OutputObject {
    _glpDeposited: bigint;
    _glpMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeverageDownEvent {
  export type InputTuple = [
    _stableDebt: BigNumberish,
    _oldLeverage: BigNumberish,
    _currentLeverage: BigNumberish
  ];
  export type OutputTuple = [
    _stableDebt: bigint,
    _oldLeverage: bigint,
    _currentLeverage: bigint
  ];
  export interface OutputObject {
    _stableDebt: bigint;
    _oldLeverage: bigint;
    _currentLeverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeverageUpEvent {
  export type InputTuple = [
    _stableDebt: BigNumberish,
    _oldLeverage: BigNumberish,
    _currentLeverage: BigNumberish
  ];
  export type OutputTuple = [
    _stableDebt: bigint,
    _oldLeverage: bigint,
    _currentLeverage: bigint
  ];
  export interface OutputObject {
    _stableDebt: bigint;
    _oldLeverage: bigint;
    _currentLeverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [_stablesReceived: BigNumberish];
  export type OutputTuple = [_stablesReceived: bigint];
  export interface OutputObject {
    _stablesReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceEvent {
  export type InputTuple = [
    _glpDebt: BigNumberish,
    _currentLeverage: BigNumberish,
    _newLeverage: BigNumberish,
    _sender: AddressLike
  ];
  export type OutputTuple = [
    _glpDebt: bigint,
    _currentLeverage: bigint,
    _newLeverage: bigint,
    _sender: string
  ];
  export interface OutputObject {
    _glpDebt: bigint;
    _currentLeverage: bigint;
    _newLeverage: bigint;
    _sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayGlpEvent {
  export type InputTuple = [_amount: BigNumberish];
  export type OutputTuple = [_amount: bigint];
  export interface OutputObject {
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayStableEvent {
  export type InputTuple = [_amount: BigNumberish];
  export type OutputTuple = [_amount: bigint];
  export interface OutputObject {
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLeverageConfigEvent {
  export type InputTuple = [
    _target: BigNumberish,
    _min: BigNumberish,
    _max: BigNumberish
  ];
  export type OutputTuple = [_target: bigint, _min: bigint, _max: bigint];
  export interface OutputObject {
    _target: bigint;
    _min: bigint;
    _max: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateGlpAddressEvent {
  export type InputTuple = [
    _oldGlpAddress: AddressLike,
    _newGlpAddress: AddressLike
  ];
  export type OutputTuple = [_oldGlpAddress: string, _newGlpAddress: string];
  export interface OutputObject {
    _oldGlpAddress: string;
    _newGlpAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateStableAddressEvent {
  export type InputTuple = [
    _oldStableAddress: AddressLike,
    _newStableAddress: AddressLike
  ];
  export type OutputTuple = [
    _oldStableAddress: string,
    _newStableAddress: string
  ];
  export interface OutputObject {
    _oldStableAddress: string;
    _newStableAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GLPLeverage extends BaseContract {
  connect(runner?: ContractRunner | null): GLPLeverage;
  waitForDeployment(): Promise<this>;

  interface: GLPLeverageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GLP_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  GMX_BASIS: TypedContractMethod<[], [bigint], "view">;

  GOVERNOR_ROLE: TypedContractMethod<[], [string], "view">;

  KEEPER_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER_ROLE: TypedContractMethod<[], [string], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  USDC_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  acceptAccountTransfer: TypedContractMethod<
    [_sender: AddressLike, _gmxRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  buyGlpStableSimulation: TypedContractMethod<
    [_stableAmount: BigNumberish],
    [bigint],
    "view"
  >;

  compound: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  getGMXCapDifference: TypedContractMethod<[], [bigint], "view">;

  getRedeemStableGMXIncentive: TypedContractMethod<
    [_stableAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getRequiredGlpAmount: TypedContractMethod<
    [_stableAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getRequiredStableAmount: TypedContractMethod<
    [_glpAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStableGlpValue: TypedContractMethod<
    [_glpAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getTargetLeverage: TypedContractMethod<[], [bigint], "view">;

  getUnderlyingGlp: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  glp: TypedContractMethod<[], [string], "view">;

  glpMintIncentive: TypedContractMethod<
    [_glpAmount: BigNumberish],
    [bigint],
    "view"
  >;

  glpRedeemRetention: TypedContractMethod<
    [_glpAmount: BigNumberish],
    [bigint],
    "view"
  >;

  glpRetentionPercentage: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  incentiveReceiver: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _governor: AddressLike,
      _glpVault: AddressLike,
      _glpStableVault: AddressLike,
      _distributor: AddressLike,
      _stableRetentionPercentage: BigNumberish,
      _glpRetentionPercentage: BigNumberish,
      _incentiveReceiver: AddressLike,
      _leverageConfig: JonesGlpLeverageStrategy.LeverageConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  leverage: TypedContractMethod<[], [bigint], "view">;

  leverageConfig: TypedContractMethod<
    [],
    [[bigint, bigint, bigint] & { target: bigint; min: bigint; max: bigint }],
    "view"
  >;

  leverageDown: TypedContractMethod<
    [_glpAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  leverageUp: TypedContractMethod<
    [_stableAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  onGlpDeposit: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  onGlpRedeem: TypedContractMethod<
    [_glpAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  onStableDeposit: TypedContractMethod<[], [void], "nonpayable">;

  onStableRedeem: TypedContractMethod<
    [_amount: BigNumberish, _amountAfterRetention: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  rebalance: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAsset: TypedContractMethod<
    [_glp: AddressLike, _stable: AddressLike, _yrt: AddressLike],
    [void],
    "nonpayable"
  >;

  setGlpAddress: TypedContractMethod<[_glp: AddressLike], [void], "nonpayable">;

  setLeverageConfig: TypedContractMethod<
    [
      _target: BigNumberish,
      _min: BigNumberish,
      _max: BigNumberish,
      rebalance_: boolean
    ],
    [void],
    "nonpayable"
  >;

  setNewRetentions: TypedContractMethod<
    [
      _stableRetentionPercentage: BigNumberish,
      _glpRetentionPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setStableAddress: TypedContractMethod<
    [_stable: AddressLike],
    [void],
    "nonpayable"
  >;

  stable: TypedContractMethod<[], [string], "view">;

  stableDebt: TypedContractMethod<[], [bigint], "view">;

  stableRetentionPercentage: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferAccount: TypedContractMethod<
    [_to: AddressLike, _gmxRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  unwind: TypedContractMethod<[], [void], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  utilization: TypedContractMethod<[], [bigint], "view">;

  yrt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GLP_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GMX_BASIS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOVERNOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "KEEPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptAccountTransfer"
  ): TypedContractMethod<
    [_sender: AddressLike, _gmxRouter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyGlpStableSimulation"
  ): TypedContractMethod<[_stableAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "compound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGMXCapDifference"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRedeemStableGMXIncentive"
  ): TypedContractMethod<[_stableAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequiredGlpAmount"
  ): TypedContractMethod<[_stableAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequiredStableAmount"
  ): TypedContractMethod<[_glpAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStableGlpValue"
  ): TypedContractMethod<[_glpAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTargetLeverage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingGlp"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "glp"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "glpMintIncentive"
  ): TypedContractMethod<[_glpAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "glpRedeemRetention"
  ): TypedContractMethod<[_glpAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "glpRetentionPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "incentiveReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _governor: AddressLike,
      _glpVault: AddressLike,
      _glpStableVault: AddressLike,
      _distributor: AddressLike,
      _stableRetentionPercentage: BigNumberish,
      _glpRetentionPercentage: BigNumberish,
      _incentiveReceiver: AddressLike,
      _leverageConfig: JonesGlpLeverageStrategy.LeverageConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leverage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "leverageConfig"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint] & { target: bigint; min: bigint; max: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "leverageDown"
  ): TypedContractMethod<[_glpAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "leverageUp"
  ): TypedContractMethod<[_stableAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onGlpDeposit"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onGlpRedeem"
  ): TypedContractMethod<[_glpAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "onStableDeposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onStableRedeem"
  ): TypedContractMethod<
    [_amount: BigNumberish, _amountAfterRetention: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAsset"
  ): TypedContractMethod<
    [_glp: AddressLike, _stable: AddressLike, _yrt: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGlpAddress"
  ): TypedContractMethod<[_glp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLeverageConfig"
  ): TypedContractMethod<
    [
      _target: BigNumberish,
      _min: BigNumberish,
      _max: BigNumberish,
      rebalance_: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNewRetentions"
  ): TypedContractMethod<
    [
      _stableRetentionPercentage: BigNumberish,
      _glpRetentionPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStableAddress"
  ): TypedContractMethod<[_stable: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stable"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stableDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stableRetentionPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferAccount"
  ): TypedContractMethod<
    [_to: AddressLike, _gmxRouter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unwind"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "utilization"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yrt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowStable"
  ): TypedContractEvent<
    BorrowStableEvent.InputTuple,
    BorrowStableEvent.OutputTuple,
    BorrowStableEvent.OutputObject
  >;
  getEvent(
    key: "Compound"
  ): TypedContractEvent<
    CompoundEvent.InputTuple,
    CompoundEvent.OutputTuple,
    CompoundEvent.OutputObject
  >;
  getEvent(
    key: "Deleverage"
  ): TypedContractEvent<
    DeleverageEvent.InputTuple,
    DeleverageEvent.OutputTuple,
    DeleverageEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Leverage"
  ): TypedContractEvent<
    LeverageEvent.InputTuple,
    LeverageEvent.OutputTuple,
    LeverageEvent.OutputObject
  >;
  getEvent(
    key: "LeverageDown"
  ): TypedContractEvent<
    LeverageDownEvent.InputTuple,
    LeverageDownEvent.OutputTuple,
    LeverageDownEvent.OutputObject
  >;
  getEvent(
    key: "LeverageUp"
  ): TypedContractEvent<
    LeverageUpEvent.InputTuple,
    LeverageUpEvent.OutputTuple,
    LeverageUpEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "Rebalance"
  ): TypedContractEvent<
    RebalanceEvent.InputTuple,
    RebalanceEvent.OutputTuple,
    RebalanceEvent.OutputObject
  >;
  getEvent(
    key: "RepayGlp"
  ): TypedContractEvent<
    RepayGlpEvent.InputTuple,
    RepayGlpEvent.OutputTuple,
    RepayGlpEvent.OutputObject
  >;
  getEvent(
    key: "RepayStable"
  ): TypedContractEvent<
    RepayStableEvent.InputTuple,
    RepayStableEvent.OutputTuple,
    RepayStableEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetLeverageConfig"
  ): TypedContractEvent<
    SetLeverageConfigEvent.InputTuple,
    SetLeverageConfigEvent.OutputTuple,
    SetLeverageConfigEvent.OutputObject
  >;
  getEvent(
    key: "UpdateGlpAddress"
  ): TypedContractEvent<
    UpdateGlpAddressEvent.InputTuple,
    UpdateGlpAddressEvent.OutputTuple,
    UpdateGlpAddressEvent.OutputObject
  >;
  getEvent(
    key: "UpdateStableAddress"
  ): TypedContractEvent<
    UpdateStableAddressEvent.InputTuple,
    UpdateStableAddressEvent.OutputTuple,
    UpdateStableAddressEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "BorrowStable(uint256)": TypedContractEvent<
      BorrowStableEvent.InputTuple,
      BorrowStableEvent.OutputTuple,
      BorrowStableEvent.OutputObject
    >;
    BorrowStable: TypedContractEvent<
      BorrowStableEvent.InputTuple,
      BorrowStableEvent.OutputTuple,
      BorrowStableEvent.OutputObject
    >;

    "Compound(uint256,uint256)": TypedContractEvent<
      CompoundEvent.InputTuple,
      CompoundEvent.OutputTuple,
      CompoundEvent.OutputObject
    >;
    Compound: TypedContractEvent<
      CompoundEvent.InputTuple,
      CompoundEvent.OutputTuple,
      CompoundEvent.OutputObject
    >;

    "Deleverage(uint256,uint256)": TypedContractEvent<
      DeleverageEvent.InputTuple,
      DeleverageEvent.OutputTuple,
      DeleverageEvent.OutputObject
    >;
    Deleverage: TypedContractEvent<
      DeleverageEvent.InputTuple,
      DeleverageEvent.OutputTuple,
      DeleverageEvent.OutputObject
    >;

    "EmergencyWithdraw(address,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Leverage(uint256,uint256)": TypedContractEvent<
      LeverageEvent.InputTuple,
      LeverageEvent.OutputTuple,
      LeverageEvent.OutputObject
    >;
    Leverage: TypedContractEvent<
      LeverageEvent.InputTuple,
      LeverageEvent.OutputTuple,
      LeverageEvent.OutputObject
    >;

    "LeverageDown(uint256,uint256,uint256)": TypedContractEvent<
      LeverageDownEvent.InputTuple,
      LeverageDownEvent.OutputTuple,
      LeverageDownEvent.OutputObject
    >;
    LeverageDown: TypedContractEvent<
      LeverageDownEvent.InputTuple,
      LeverageDownEvent.OutputTuple,
      LeverageDownEvent.OutputObject
    >;

    "LeverageUp(uint256,uint256,uint256)": TypedContractEvent<
      LeverageUpEvent.InputTuple,
      LeverageUpEvent.OutputTuple,
      LeverageUpEvent.OutputObject
    >;
    LeverageUp: TypedContractEvent<
      LeverageUpEvent.InputTuple,
      LeverageUpEvent.OutputTuple,
      LeverageUpEvent.OutputObject
    >;

    "Liquidate(uint256)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "Rebalance(uint256,uint256,uint256,address)": TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;
    Rebalance: TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;

    "RepayGlp(uint256)": TypedContractEvent<
      RepayGlpEvent.InputTuple,
      RepayGlpEvent.OutputTuple,
      RepayGlpEvent.OutputObject
    >;
    RepayGlp: TypedContractEvent<
      RepayGlpEvent.InputTuple,
      RepayGlpEvent.OutputTuple,
      RepayGlpEvent.OutputObject
    >;

    "RepayStable(uint256)": TypedContractEvent<
      RepayStableEvent.InputTuple,
      RepayStableEvent.OutputTuple,
      RepayStableEvent.OutputObject
    >;
    RepayStable: TypedContractEvent<
      RepayStableEvent.InputTuple,
      RepayStableEvent.OutputTuple,
      RepayStableEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetLeverageConfig(uint256,uint256,uint256)": TypedContractEvent<
      SetLeverageConfigEvent.InputTuple,
      SetLeverageConfigEvent.OutputTuple,
      SetLeverageConfigEvent.OutputObject
    >;
    SetLeverageConfig: TypedContractEvent<
      SetLeverageConfigEvent.InputTuple,
      SetLeverageConfigEvent.OutputTuple,
      SetLeverageConfigEvent.OutputObject
    >;

    "UpdateGlpAddress(address,address)": TypedContractEvent<
      UpdateGlpAddressEvent.InputTuple,
      UpdateGlpAddressEvent.OutputTuple,
      UpdateGlpAddressEvent.OutputObject
    >;
    UpdateGlpAddress: TypedContractEvent<
      UpdateGlpAddressEvent.InputTuple,
      UpdateGlpAddressEvent.OutputTuple,
      UpdateGlpAddressEvent.OutputObject
    >;

    "UpdateStableAddress(address,address)": TypedContractEvent<
      UpdateStableAddressEvent.InputTuple,
      UpdateStableAddressEvent.OutputTuple,
      UpdateStableAddressEvent.OutputObject
    >;
    UpdateStableAddress: TypedContractEvent<
      UpdateStableAddressEvent.InputTuple,
      UpdateStableAddressEvent.OutputTuple,
      UpdateStableAddressEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
